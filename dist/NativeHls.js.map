{"version":3,"file":"NativeHls.js","sources":["../src/js/utils/Http.js","../src/js/utils/M3u8Parser.js","../src/js/NativeHls.js"],"sourcesContent":["/**\n * @class httpModule\n * @type {{getPageByURL, handleResponse, parseCookie, queryStringToJsonObject, jsonObjectToQuerystring}}\n */\n\nvar _totalMillisecondsDelta = 0,\n    _noop = function () {},\n    _activeXHRs = [],\n    _totalBytesDelta = 0,\n    _maximumHistorySize = 7,\n    _totalBytesDeltaHistory = [],\n    _totalMillisecondsDeltaHistory = [],\n    _isObjLiteral = function (_obj) {\n        var _test = _obj;\n        return (typeof _obj !== 'object' || _obj === null ?\n            false :\n            (\n                (function () {\n                    while (!false) {\n                        if (Object.getPrototypeOf(_test = Object.getPrototypeOf(_test)) === null) {\n                            break;\n                        }\n                    }\n                    return Object.getPrototypeOf(_obj) === _test;\n                })()\n            )\n        );\n    },\n    _verifiedOptions = function (options) {\n        if (!_isObjLiteral(options)) {\n            console.error('Cannot construct http request, the options parameter is not an object literal.', options);\n            return false;\n        }\n\n        if (!('method' in options)) {\n            console.error('Cannot construct http request, the method was not specified.', options);\n            return false;\n        }\n\n        if (!('url' in options)) {\n            console.error('Cannot construct http request, the url was not specified.', options);\n            return false;\n        }\n\n        return true;\n    },\n    _objectToQueryString = function (obj) {\n        var parts = [];\n        for (var key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                parts.push(encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]));\n            }\n        }\n        return parts.join('&');\n    },\n    _updateProgress = function (event) {\n        // Make sure to reset the bytes downloaded (can happen after an abort).\n        if (event.loaded < this.bytesDownloaded) {\n            this.bytesDownloaded = 0;\n        }\n\n        // Get the number of new bytes downloaded.\n        var bytesDelta = event.loaded - this.bytesDownloaded,\n            millisecondsDelta = event.timeStamp - this.timestamp;\n\n        // Update the total values.\n        _totalMillisecondsDelta += millisecondsDelta;\n        _totalBytesDelta += bytesDelta;\n        Http.totalBytesDownloaded += bytesDelta;\n\n        // Store local values.\n        this.bytesDownloaded = event.loaded;\n        this.totalSizeInBytes = event.total;\n        this.timestamp = event.timeStamp;\n\n        // Update the progress.\n        this.downloadProgress = this.bytesDownloaded / this.totalSizeInBytes;\n\n        Http.resetStatistics();\n    };\n\n/**\n * Makes an HTTP request and serves as an advanced HTTP Api\n *\n * @param  {[type]}   options  [description]\n * @param  {Function} callback [description]\n * @return {[type]}            [description]\n */\nfunction Http(options, callback) {\n\n    if (!(_verifiedOptions(options))) {\n        return;\n    }\n\n    this.instID = this.constructor.name + '.' + (Math.random() * (new Date().getTime()));\n\n    var method = options.method,\n        url = options.url,\n        data = '',\n        timeout = 'timeout' in options ? options.timeout : 3000,\n        xhr;\n\n    this.timestamp = 0;\n    this.method = method;\n    this.url = url;\n\n    this.status = 0;\n    this.bytesDownloaded = 0;\n    this.totalSizeInBytes = 0;\n    this.downloadProgress = 0;\n    this.bandwidth = null;\n    this.timeOfRequest = null;\n    this.timeOfResponse = null;\n    this.roundTripTime = null;\n    this.onReady = null;\n    this.onProgress = null;\n    this.onLoadStart = null;\n    this.onError = null;\n    this.onSuccess = callback;\n\n    xhr = new XMLHttpRequest();\n\n    if ('data' in options) {\n        data = _objectToQueryString(options.data);\n    }\n\n    xhr.onreadystatechange = function (event) {\n        this.status = xhr.status;\n\n        if (this.onReady !== null) {\n            this.onReady();\n        }\n    }.bind(this);\n\n    xhr.onprogress = function (event) {\n        _updateProgress.call(this, event);\n\n        if (this.onProgress !== null) {\n            this.onProgress();\n        }\n    }.bind(this);\n\n    xhr.onloadstart = function (event) {\n        this.timestamp = event.timeStamp;\n\n        if (this.onLoadStart !== null) {\n            this.onLoadStart();\n        }\n    }.bind(this);\n\n    xhr.onerror = function (event) {\n        Http.downloadingRequests -= 1;\n\n        if (this.onError !== null) {\n            (this.onError || _noop)(xhr);\n        } else {\n            this.onSuccess(null);\n        }\n    }.bind(this);\n\n    xhr.onload = function (event) {\n        _updateProgress.call(this, event);\n\n        Http.downloadingRequests -= 1;\n\n        // Remove the active XHR from active XHRs\n        for (var i = 0; i < _activeXHRs.length; i++) {\n            var activeXHR = _activeXHRs[i];\n\n\n            if (activeXHR.id == this.instID) {\n                _activeXHRs.splice(i, 1);\n            }\n        }\n\n        this.timeOfResponse = (new Date()).getTime();\n        this.roundTripTime = this.timeOfResponse - this.timeOfRequest;\n        xhr.bandwidth = Math.floor((this.bytesDownloaded / this.roundTripTime) * 8 * 1000);\n        this.bandwidth = xhr.bandwidth;\n        this.onSuccess(xhr);\n    }.bind(this);\n\n    // GET requests should have the data in the URL instead of the body\n    if (method === 'GET') {\n        url += data;\n    }\n\n    // Open the asynchronous request\n    xhr.open(method, url, true);\n\n    this.timeOfRequest = (new Date()).getTime();\n    Http.downloadingRequests += 1;\n\n    //Set the responseType\n    if ('responseType' in options) {\n        xhr.responseType = options.responseType;\n    }\n\n    // Add headers, must be done after open but before send (see mdn docs)\n    if ('headers' in options) {\n        for (var key in options.headers) {\n            if (options.headers.hasOwnProperty(key)) {\n                console.log('Setting header', key, 'with', options.headers[key]);\n                xhr.setRequestHeader(key, options.headers[key]);\n            }\n        }\n    }\n\n    _activeXHRs.push({\n        id: this.instID,\n        inst: this\n    });\n\n    try {\n        xhr.send(data);\n    } catch (ex) {\n        console.error('HTTP Request aborted due: ', ex);\n        (this.onError || _noop)(xhr);\n    }\n\n\n    // Listen to timeouts.\n    this.timeout = setTimeout(function () {\n        if (this.bytesDownloaded === 0) {\n            this.abort();\n\n            if (this.onError !== null) {\n                this.onError(xhr);\n            } else {\n                this.onSuccess(null);\n            }\n        }\n\n        clearTimeout(this.timeout);\n    }.bind(this), timeout);\n\n    this.xhr = xhr;\n}\n\nHttp.downloadingRequests = 0;\nHttp.totalBytesDownloaded = 0;\nHttp.averagedBandwidth = 0;\n\nHttp.get = function (url, callback) {\n    var options = {\n        url: url,\n        method: 'GET',\n        data: {}\n    };\n\n    return new Http(options, callback);\n};\n\nHttp.post = function (url, data, callback) {\n    var options = {\n        url: url,\n        method: 'POST',\n        data: data\n    };\n\n    return new Http(options, callback);\n};\n\nHttp.abortAll = function () {\n    for (var i = 0; i < _activeXHRs.length; i++) {\n        var activeXHR = _activeXHRs[i];\n        activeXHR.inst.abort();\n    }\n};\n\nHttp.resetStatistics = function () {\n    var milliseconds = 0.0,\n        bytes = 0.0,\n        avgBandwidth = null,\n        i;\n\n    // Push the total milliseconds delta if there is data.\n    if (_totalMillisecondsDelta > 0) {\n        _totalMillisecondsDeltaHistory.push(_totalMillisecondsDelta);\n        _totalMillisecondsDelta = 0;\n\n        if (_totalMillisecondsDeltaHistory.length > _maximumHistorySize) {\n            _totalMillisecondsDeltaHistory.shift();\n        }\n    }\n\n    // Push the total bytes delta if there is data.\n    if (_totalBytesDelta > 0) {\n        _totalBytesDeltaHistory.push(_totalBytesDelta);\n        _totalBytesDelta = 0;\n        if (_totalBytesDeltaHistory.length > _maximumHistorySize) {\n            _totalBytesDeltaHistory.shift();\n        }\n    }\n\n    // Calculate the total of milliseconds.\n    for (i = 0; i < _totalMillisecondsDeltaHistory.length; i++) {\n        milliseconds += _totalMillisecondsDeltaHistory[i];\n    }\n\n    // Calculate the total of bytes.\n    for (i = 0; i < _totalBytesDeltaHistory.length; i++) {\n        bytes += _totalBytesDeltaHistory[i];\n    }\n\n    // Calculate the average bandwidth.\n    if (milliseconds > 0) {\n        avgBandwidth = (bytes * 1000) / milliseconds;\n    }\n\n    Http.averagedBandwidth = Http.averagedBandwidth === 0 ? avgBandwidth : (Http.averagedBandwidth + avgBandwidth) / 2;\n\n    // Reset all values.\n    _totalMillisecondsDelta = 0;\n    _totalBytesDelta = 0;\n    //Http.totalBytesDownloaded = 0;\n};\n\nHttp.prototype.abort = function () {\n    var xhr = this.xhr;\n    xhr.onerror = null;\n\n    // Abort the download.\n    xhr.abort();\n\n    // Update the number of active requests.\n    Http.downloadingRequests -= 1;\n};\n\n/**\n * Sugar syntax for when a request is done\n *\n * @param  {Function} callback [description]\n * @return {Function}          [description]\n */\nHttp.prototype.done = function (callback) {\n    this.onSuccess = callback;\n    return this;\n};\n\n/**\n * Sugar syntax for when a request throws an error\n *\n * @param  {Function} callback [description]\n * @return {[type]}            [description]\n */\nHttp.prototype.error = function (callback) {\n    this.onError = callback;\n    return this;\n};\n\n/**\n * Sugar syntax for when a request has progress\n *\n * @param  {Function} callback [description]\n * @return {[type]}            [description]\n */\nHttp.prototype.progress = function (callback) {\n    this.onProgress = callback;\n    return this;\n};\n\nmodule.exports = Http;\n","class M3u8Parser {\n    constructor(text) {\n        this.text = text;\n    }\n\n    parse() {\n        const lines = this.text.split('\\n');\n        const result = {\n            streams: [],\n            segments: {},\n            mediaSequence: 0,\n            duration: 0,\n            isLive: true,\n        };\n\n        let nextLineIsStream = false;\n        let previousMediaNumber = result.mediaSequence;\n        let streamInfo = {};\n\n        lines.forEach((line) => {\n            if (nextLineIsStream) {\n                streamInfo.url = line;\n                result.streams.push(streamInfo);\n                streamInfo = {};\n                nextLineIsStream = false;\n            }\n\n            if (line.startsWith('#EXT-X-STREAM-INF')) {\n                nextLineIsStream = true;\n            }\n\n            if (line.startsWith('#EXT-X-ENDLIST')) {\n                result.isLive = false;\n            }\n\n            // #EXT-X-STREAM-INF:PROGRAM-ID=1,RESOLUTION=600x338,BANDWIDTH=712704\n            const matchBandwith = (/^#EXT-X-STREAM-INF:.*BANDWIDTH=(\\d*)?/).exec(line);\n            if (matchBandwith && matchBandwith[1]) {\n                const bandwith = matchBandwith[1];\n                streamInfo.bandwith = bandwith;\n            }\n\n            const matchResolution = (/^#EXT-X-STREAM-INF:.*RESOLUTION=(\\d*x\\d*)?/).exec(line);\n            if (matchResolution && matchResolution[1]) {\n                const resolutions = matchResolution[1].split('x');\n                if (resolutions.length < 2) {\n                    streamInfo.resolution = {\n                        width: 0,\n                        height: 0,\n                    };\n                } else {\n                    const resolutionInfo = {\n                        width: parseInt(resolutions[0], 10),\n                        height: parseInt(resolutions[1], 10),\n                    };\n\n                    streamInfo.resolution = resolutionInfo;\n                }\n            }\n\n            const matchInfo = (/^#EXTINF:?([0-9\\.]*)?,?(.*)?/).exec(line);\n            if (matchInfo && matchInfo[1]) {\n                result.segments[previousMediaNumber] = parseFloat(matchInfo[1]);\n                previousMediaNumber++;\n                result.duration += parseFloat(matchInfo[1]);\n            }\n\n            const matchMediaSequence = (/^#EXT-X-MEDIA-SEQUENCE:?(\\-?[0-9.]*)?/).exec(line);\n            if (matchMediaSequence && matchMediaSequence[1]) {\n                result.mediaSequence = parseInt(matchMediaSequence[1], 10);\n                previousMediaNumber = parseInt(matchMediaSequence[1], 10);\n            }\n        });\n\n        return result;\n    }\n}\n\nexport default M3u8Parser;\n","import Http from './utils/Http';\nimport M3u8Parser from './utils/M3u8Parser';\n\nconst POLL_INTERVAL = 1000;\n\nclass NativeHls extends Meister.MediaPlugin {\n    constructor(config, meister, next) {\n        super(config, meister);\n\n        this.manifestParsed = false;\n\n        this.audioMode = false;\n\n        this.metadata = [];\n        this.previousMetadata = null;\n\n        // Middleware promise chain.\n        this.next = next;\n\n        // -1 for automatic quality selection\n        this.previousLevel = -1;\n        this.lowestLevel = 0;\n\n        this.dvrThreshold = this.config.dvrThreshold || 300;\n\n        // new\n        this.duration = 0;\n        this.endTime = 0;\n        this.beginTime = 0;\n        this.mediaSequence = 0;\n        this.lastMediaSequence = 0;\n        this.childManifest = null;\n        this.qualityStreams = [];\n        this.masterPlaylist = null;\n\n        this.baseEndTime = 0;\n\n        this.manifestTimeoutId = null;\n\n        // Keep track of the current playback quality.\n        this.pollResolutionId = null;\n        this.currentResolution = {\n            width: 0,\n            height: 0,\n        };\n\n        this.name = 'nativeHLS';\n        this.events = [];\n    }\n\n    static get pluginName() {\n        return 'NativeHls';\n    }\n\n    isItemSupported(item) {\n        return new Promise((resolve) => {\n            if (item.type !== 'm3u8' && item.type !== 'm3u') {\n                return resolve({\n                    supported: false,\n                    errorCode: Meister.ErrorCodes.WRONG_TYPE,\n                });\n            }\n            // Exception for safari.\n            if ((!this.meister.browser.isSafari)\n                || (!this.meister.browser.isiOS && this.config.safariDesktopDisabled)\n            ) {\n                return resolve({\n                    supported: false,\n                    errorCode: Meister.ErrorCodes.NOT_SUPPORTED,\n                });\n            }\n\n            if (item.drm || item.drmConfig) {\n                this.meister.one('drmKeySystemSupport', (supportedDRMSystems) => {\n                    let supported = false;\n                    Object.keys(supportedDRMSystems).forEach((key) => {\n                        if ((key === 'com.apple.fps' && supportedDRMSystems[key]) ||\n                            (key === 'com.apple.fps.1_0' && supportedDRMSystems[key]) ||\n                            (key === 'com.apple.fps.2_0' && supportedDRMSystems[key])) {\n                            supported = true;\n                        }\n                    });\n                    return resolve({\n                        supported,\n                        errorCode: supported ? null : Meister.ErrorCodes.NO_DRM,\n                    });\n                });\n\n                this.meister.trigger('requestDrmKeySystemSupport', {});\n            } else {\n                return resolve({\n                    supported: true,\n                });\n            }\n        });\n    }\n\n    resetPrivates() {\n        this.metadata = [];\n        this.previousMetadata = null;\n\n        this.manifestParsed = false;\n\n        this.previousLevel = -1;\n        this.lowestLevel = 0;\n        this.duration = 0;\n        this.item = null;\n    }\n\n    process(item) {\n        return this.next(item).then((newItem) => {\n            this.player = this.meister.getPlayerByType('html5', newItem);\n            if (this.meister.config.audioOnly || newItem.mediaType === 'audio') {\n                this.audioMode = true;\n            } else {\n                this.audioMode = false;\n            }\n\n            return newItem;\n        }).catch((err) => {\n            console.error(`Something went wrong while processing middlewares. ${err}`);\n        });\n    }\n\n    load(item) {\n        super.load(item);\n        this.item = item;\n\n        return new Promise((resolve) => {\n            this.mediaElement = this.player.mediaElement;\n            this.mediaElement.src = item.src;\n            this.masterPlaylist = item.src;\n\n            // Display the correct title.\n            this.on('_playerTimeUpdate', this._onPlayerTimeUpdate.bind(this));\n            this.on('_playerSeek', this._onPlayerSeek.bind(this));\n            this.on('requestSeek', this.onRequestSeek.bind(this));\n\n            // Listen to control events.\n            this.on('requestBitrate', this.onRequestBitrate.bind(this));\n            this.on('requestGoLive', () => this.onRequestGoLive());\n\n            this.pollResolutionId = setInterval(this.pollResolution.bind(this), POLL_INTERVAL);\n\n            // Trigger this to make it look pretty.\n            // Loading the first playlist.\n            this.loadManifest(item.src).then((manifest) => {\n                this.endTime = manifest.duration;\n                this.baseEndTime = this.endTime;\n                this.duration = manifest.duration;\n                this.mediaSequence = manifest.mediaSequence;\n\n                this.beginTime = this.endTime - this.duration;\n\n                // Kinda weird, but let's roll with it for now..\n                const lastMediaSequence = Object.keys(manifest.segments)[(Object.keys(manifest.segments).length - 1)];\n                this.lastMediaSequence = lastMediaSequence;\n\n                let hasDVR = ((manifest.duration > this.dvrThreshold) && manifest.isLive);\n\n                if (this.config.dvrEnabled === false) {\n                    hasDVR = false;\n                }\n\n                this.meister.trigger('itemTimeInfo', {\n                    isLive: manifest.isLive,\n                    hasDVR,\n                    duration: this.duration,\n                    modifiedDuration: this.duration,\n                    endTime: this.endTime,\n                });\n\n                // this.onMasterPlaylistLoaded(manifest);\n                if (manifest.isLive) this.onRequestGoLive();\n\n                this.manifestTimeoutId = setTimeout(() => {\n                    this.getNewManifest();\n                }, 5000); // Amount of seconds should be dynamic (By using the manifest)\n            });\n\n            resolve();\n        });\n    }\n\n    _onPlayerTimeUpdate() {\n        const playOffset = this.endTime - this.duration;\n\n        this.meister.trigger('playerTimeUpdate', {\n            currentTime: this.meister.currentTime - playOffset,\n            duration: this.duration,\n        });\n\n        this.broadcastTitle();\n    }\n\n    _onPlayerSeek() {\n        const playOffset = this.endTime - this.duration;\n\n        const currentTime = this.meister.currentTime - playOffset;\n        const duration = this.duration;\n        const relativePosition = currentTime / duration;\n\n        this.meister.trigger('playerSeek', {\n            relativePosition,\n            currentTime,\n            duration,\n        });\n    }\n\n    onRequestSeek(e) {\n        let targetTime;\n\n        if (Number.isFinite(e.relativePosition)) {\n            const playOffset = this.endTime - this.duration;\n            targetTime = (this.duration * e.relativePosition) + playOffset;\n        } else if (Number.isFinite(e.timeOffset)) {\n            targetTime = this.meister.currentTime + e.timeOffset;\n        } else if (Number.isFinite(e.targetTime)) {\n            const playOffset = this.endTime - this.duration;\n            targetTime = e.targetTime + playOffset;\n        }\n\n        // Check whether we are allowed to seek forward.\n        if (!e.forcedStart && this.blockSeekForward && targetTime > this.meister.currentTime) { return; }\n\n        if (Number.isFinite(targetTime)) {\n            this.meister.currentTime = targetTime;\n        }\n    }\n\n    onRequestGoLive() {\n        if (isNaN(this.meister.duration)) {\n            this.meister.one('playerLoadedMetadata', () => {\n                this.onRequestGoLive();\n            });\n        } else {\n            this.meister.currentTime = this.endTime - 30;\n        }\n    }\n\n    broadcastTitle() {\n        const time = this.meister.currentTime;\n        // No need to spam events.\n        if (this.previousMetadata &&\n                (this.previousMetadata.start < time && time < this.previousMetadata.end)\n            ) {\n            return;\n        }\n\n        // Still playing the same item.\n        const currentMetadata = this.currentlyPlaying;\n        if (this.previousMetadata &&\n                (currentMetadata.title === this.previousMetadata.title)\n            ) {\n            return;\n        }\n\n        // Remember the current metadata for the next call.\n        this.previousMetadata = currentMetadata;\n\n        // Broadcast event for the ui.\n        this.meister.trigger('itemMetadata', {\n            title: currentMetadata.title,\n        });\n    }\n\n\n    onRequestBitrate(e) {\n        const previousCurrentTime = this.meister.currentTime;\n        const wasPlaying = this.meister.playing;\n\n        // Since we're setting a new source we could need updated drm settings.\n        if (e.drmConfig) {\n            this.meister.trigger('drmConfig', e.drmConfig);\n        }\n\n        this.meister.playerPlugin.mediaElement.src = '';\n        if (e.bitrateIndex === -1) {\n            this.meister.playerPlugin.mediaElement.src = this.masterPlaylist;\n        } else {\n            this.meister.playerPlugin.mediaElement.src = this.meister.utils.resolveUrl(this.masterPlaylist, this.qualityStreams[e.bitrateIndex].url);\n        }\n\n        // Reset playoffset and endtime, since we cleared the source.\n        this.playOffset = 0;\n        this.endTime = this.baseEndTime;\n\n        this.meister.one('playerLoadedMetadata', () => {\n            this.meister.currentTime = previousCurrentTime;\n\n            if (wasPlaying) {\n                this.meister.play();\n            } else {\n                this.meister.pause();\n            }\n        });\n    }\n\n    onError(e, data) {\n        console.warn(`Error in ${this.name}, type: ${data.details}, will attempt to recover.`);\n        if (data.fatal) {\n            console.error(`Can not recover from ${data.type}: ${data.details}.`);\n        }\n    }\n\n    // copypaste from native-hls\n    pollResolution() {\n        const height = this.mediaElement.videoHeight;\n        const width = this.mediaElement.videoWidth;\n\n        if (this.currentResolution.width === width && this.currentResolution.height === height) return;\n\n        const newBitrate = this.qualityStreams.find((stream) =>\n            stream.resolution && stream.resolution.width === width && stream.resolution.height === height\n        );\n\n        // This can happen while switching streams, no need to notify the player.\n        if (!newBitrate) return;\n\n        const newBitrateIndex = this.qualityStreams.indexOf(newBitrate);\n\n        this.meister.trigger('playerAutoSwitchBitrate', {\n            newBitrate: parseInt(newBitrate.bandwith, 10),\n            newBitrateIndex,\n        });\n\n        this.currentResolution = newBitrate.resolution;\n    }\n\n    get currentItem() {\n        const metadata = this.currentlyPlaying;\n\n        const currentItem = {\n            src: this.item.src,\n            type: this.item.type,\n            title: metadata.title,\n            bitrate: metadata.bitrate,\n        };\n\n        return currentItem;\n    }\n\n    get currentlyPlaying() {\n        // Prepare return object.\n        const metadata = {\n            bitrate: 0,\n            title: '',\n        };\n\n        // Traverse backwards since it is more likely that the player is near the end\n        let data = null;\n        const time = this.meister.currentTime;\n        for (let i = this.metadata.length - 1; i >= 0; i--) {\n            if (this.metadata[i].start < time && time < this.metadata[i].end) {\n                data = this.metadata[i];\n                break;\n            }\n        }\n\n        if (data) {\n            metadata.title = data.title;\n            metadata.start = data.start;\n            metadata.end = data.end;\n            metadata.duration = data.end - data.start;\n        }\n\n        return metadata;\n    }\n\n    // copypaste from native-hls\n    getNewManifest() {\n        this.loadManifest(this.childManifest).then((manifest) => {\n            const lastMediaSequence = Object.keys(manifest.segments)[(Object.keys(manifest.segments).length - 1)];\n            const amountOfNewSegments = lastMediaSequence - this.lastMediaSequence;\n\n            for (let i = 0; i < amountOfNewSegments; i++) {\n                this.endTime += manifest.segments[Object.keys(manifest.segments)[i]];\n            }\n\n            // Just for testing purposes:\n            this.duration = manifest.duration;\n            this.beginTime = this.endTime - manifest.duration;\n            this.lastMediaSequence = lastMediaSequence;\n\n            let hasDVR = ((manifest.duration > this.dvrThreshold) && manifest.isLive);\n\n            if (this.config.dvrEnabled === false) {\n                hasDVR = false;\n            }\n\n            this.meister.trigger('itemTimeInfo', {\n                isLive: manifest.isLive,\n                hasDVR,\n                duration: this.duration,\n                modifiedDuration: this.duration,\n                endTime: this.endTime,\n            });\n\n            this.manifestTimeoutId = setTimeout(() => {\n                this.getNewManifest();\n            }, 5000);\n        }, () => {\n            console.warn('WARNING: Could not load manifest, retrying loading manifest.');\n            this.manifestTimeoutId = setTimeout(() => {\n                this.getNewManifest();\n            }, 5000);\n        });\n    }\n\n    // copypaste from native-hls\n    loadManifest(src) {\n        return new Promise((resolve) => {\n            Http.get(src, (res) => {\n                const m3u8 = new M3u8Parser(res.responseText);\n                const manifest = m3u8.parse();\n\n                if (manifest.streams.length) {\n                    if (this.config.filterAudioOnly) {\n                        this.qualityStreams = manifest.streams.filter((stream) => stream.resolution);\n                    } else {\n                        this.qualityStreams = manifest.streams;\n                    }\n\n                    this.onQualitysAvailable();\n\n                    this.childManifest = this.meister.utils.resolveUrl(src, manifest.streams[0].url);\n                    // This is the master playlist we need to parse the sub playlist.\n                    this.loadManifest(this.meister.utils.resolveUrl(src, manifest.streams[0].url)).then((childManifest) => {\n                        resolve(childManifest);\n                    });\n                } else {\n                    resolve(manifest);\n                }\n            });\n        });\n    }\n\n    // copypaste from native-hls\n    onQualitysAvailable() {\n        const bitrates = [];\n\n        // Bitrate 0 means auto quality.\n        bitrates.push({\n            bitrate: 0,\n            index: -1,\n        });\n\n        for (let i = 0; i < this.qualityStreams.length; i++) {\n            const bitrate = this.qualityStreams[i];\n            bitrates.push({\n                bitrate: parseInt(bitrate.bandwith, 10),\n                index: i,\n            });\n        }\n\n        // Trigger auto bitrate by default.\n        this.meister.trigger('itemBitrates', {\n            bitrates,\n            currentIndex: -1,\n        });\n    }\n\n    unload() {\n        super.unload();\n        if (this.manifestTimeoutId) clearTimeout(this.manifestTimeoutId);\n        if (this.pollResolutionId) clearInterval(this.pollResolutionId);\n\n        this.meister.remove(this.events);\n\n        this.duration = 0;\n        this.endTime = 0;\n        this.baseEndTime = 0;\n        this.beginTime = 0;\n        this.mediaSequence = 0;\n        this.lastMediaSequence = 0;\n        this.childManifest = null;\n        this.qualityStreams = [];\n        this.masterPlaylist = null;\n        this.manifestTimeoutId = null;\n        this.pollResolutionId = null;\n        this.currentResolution = {\n            width: 0,\n            height: 0,\n        };\n        this.mediaElement = null;\n    }\n\n    destroy() {\n        super.destroy();\n    }\n}\n\nMeister.registerPlugin(NativeHls.pluginName, NativeHls);\nexport default NativeHls;\n"],"names":["_totalMillisecondsDelta","_noop","_activeXHRs","_totalBytesDelta","_maximumHistorySize","_totalBytesDeltaHistory","_totalMillisecondsDeltaHistory","_isObjLiteral","_obj","_test","Object","getPrototypeOf","_verifiedOptions","options","error","_objectToQueryString","obj","parts","key","hasOwnProperty","push","encodeURIComponent","join","_updateProgress","event","loaded","bytesDownloaded","bytesDelta","millisecondsDelta","timeStamp","timestamp","totalBytesDownloaded","totalSizeInBytes","total","downloadProgress","resetStatistics","Http","callback","instID","constructor","name","Math","random","Date","getTime","method","url","data","timeout","xhr","status","bandwidth","timeOfRequest","timeOfResponse","roundTripTime","onReady","onProgress","onLoadStart","onError","onSuccess","XMLHttpRequest","onreadystatechange","bind","onprogress","call","onloadstart","onerror","downloadingRequests","onload","i","length","activeXHR","id","splice","floor","open","responseType","headers","log","setRequestHeader","send","ex","setTimeout","abort","averagedBandwidth","get","post","abortAll","inst","milliseconds","bytes","avgBandwidth","shift","prototype","done","progress","M3u8Parser","text","lines","split","result","nextLineIsStream","previousMediaNumber","mediaSequence","streamInfo","forEach","line","streams","startsWith","isLive","matchBandwith","exec","bandwith","matchResolution","resolutions","resolution","resolutionInfo","parseInt","matchInfo","segments","parseFloat","duration","matchMediaSequence","POLL_INTERVAL","NativeHls","config","meister","next","manifestParsed","audioMode","metadata","previousMetadata","previousLevel","lowestLevel","dvrThreshold","endTime","beginTime","lastMediaSequence","childManifest","qualityStreams","masterPlaylist","baseEndTime","manifestTimeoutId","pollResolutionId","currentResolution","events","item","Promise","resolve","type","Meister","ErrorCodes","WRONG_TYPE","browser","isSafari","isiOS","safariDesktopDisabled","NOT_SUPPORTED","drm","drmConfig","one","supportedDRMSystems","supported","keys","NO_DRM","trigger","then","newItem","player","getPlayerByType","audioOnly","mediaType","catch","err","mediaElement","src","on","_onPlayerTimeUpdate","_onPlayerSeek","onRequestSeek","onRequestBitrate","onRequestGoLive","setInterval","pollResolution","loadManifest","manifest","hasDVR","dvrEnabled","getNewManifest","playOffset","currentTime","broadcastTitle","relativePosition","e","targetTime","Number","isFinite","timeOffset","forcedStart","blockSeekForward","isNaN","time","start","end","currentMetadata","currentlyPlaying","title","previousCurrentTime","wasPlaying","playing","playerPlugin","bitrateIndex","utils","resolveUrl","play","pause","warn","details","fatal","height","videoHeight","width","videoWidth","newBitrate","find","stream","newBitrateIndex","indexOf","amountOfNewSegments","res","m3u8","responseText","parse","filterAudioOnly","filter","onQualitysAvailable","bitrates","bitrate","clearTimeout","clearInterval","remove","currentItem","MediaPlugin","registerPlugin","pluginName"],"mappings":"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"}